WebRTC

Jan Linden, Google
Tim Terriberry, Mozilla
Ethan Hugg, CISCO

== Introduction - what is WebRTC

* real-time communication for the Web: need for open and free solutions
* make it easy for any Web developer to easily deploy RTC apps
* Requirements:
  * open
  * high quality
  * low latency
  * secure
  * interoperable
  * ease of use

* What will it be used for?
  * phone app
  * video conferencing
  * do what flash is capable of and more

== How did we get where we are

* started a year ago over lunch, IETF meeting July 2010
* requirements have been there for many years
* this is the right time to address it
* IETF RTCWEB WB formed in April 2011: focus on network protocols
* W3C WebRT WG created May  2011: JS API focus
* focus on WHATWG specification

== Implementation

* standards and implementations need to go at the same pace
* open source project developed that Chrome, Firefox & Opera etc can pick up
* PeerConnection in Webkit and Chrome Sept 2011 (demo provided)
* PeerConnection API in Firefox Q1 2012 (ikran) (demo provided)
* CISCO open sourced SIP stack (SIP proxy server to signal to real phone)
* CISCO demos shows a Firefox plugin that implements the SIP stack
* Ericsson has a Webkit implementation that uses WebRTC

== What does the platform provide?

* media capture
* real-time media encoding
* signal processing (noise filter, echo cancellation, gain control etc)
* real-time secure media transmission (RTP distribution, low latency, jitter buffer, encrypotion etc)
* P2P data channel should be included
* how to do signalling / negotiation



DISCUSSION

* SIP - implementation in the browser necessary? is it possibl to do peer2peer SIP without a SIP server? SIP requires a registrar
* call recording (real-time processing required, remote machine recording, where to compress, saving to local file)
* p2p distribution of content?
* DDOS? protocol to provide a shard secret and IP address is used called ICE; rate-limit the ICE protocol (there will be a native implementation of ICE)
* what protocols are supported? SRTP/RTP, DTLS (key exchange), RTCP, TURN server for two NAT-ed peers, SDP-based codec negotiation will exist
* codecs? trying to mandate vp8 & opus (2.5-20ms latency codec); real-time transcoding isn't going to happen so how do we get 
* what apis to expose for statistics? round-trip time, packet loss, latency, delay
* retain connection when switching networks/ IP addresses? not sure it works
* SIP signalling gateways exist in telephone providers
* codec transcoding gateways are not something that people want to implement
* applications: screen sharing, e.g. a live video editing session, real-time file sharing (e.g. experience video/audio together)
* cross-origin permission restrictions of what one is able to do with the data? ICE channel gives you the trust and your peer can do what they want; depending on the key exchange mechanism, you can ascertain that they are still who they claim they were at the beginning of the connection
* are schemes like ZRTP supported? not right now; don't have secure conversation through an untrusted website!
* have all the browsers implement Kademlia?
* isn't the WebRTC stack over-engineered? is there a slim version of WebRTC? e.g. for Web server content that connects to non-browser UAs like vlc; you should support codecs and probably SIP if you don't want to support JavaScript
* WebRTC and mobile? can VP8 run on phones? wait for HW implementations.
* chrome on mobile and WebRTC? right now phone users use apps more than the browser; in future it will be both and increasingly browsers
* what's still missing? requirements document - spec is still unstable; API is very basic only and goes barely beyond establishing a connection;
  * mediaStream API needs more 
  * device handling e.g. how do you enumerate cameras
  * error reporting
  * m

